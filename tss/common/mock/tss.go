// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/binance-chain/tss-lib/tss (interfaces: Message,Party)

// Package mock_tss is a generated GoMock package.
package mock_tss

import (
	reflect "reflect"

	tss "github.com/binance-chain/tss-lib/tss"
	gomock "github.com/golang/mock/gomock"
)

// MockMessage is a mock of Message interface.
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage.
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance.
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// GetFrom mocks base method.
func (m *MockMessage) GetFrom() *tss.PartyID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrom")
	ret0, _ := ret[0].(*tss.PartyID)
	return ret0
}

// GetFrom indicates an expected call of GetFrom.
func (mr *MockMessageMockRecorder) GetFrom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrom", reflect.TypeOf((*MockMessage)(nil).GetFrom))
}

// GetTo mocks base method.
func (m *MockMessage) GetTo() []*tss.PartyID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTo")
	ret0, _ := ret[0].([]*tss.PartyID)
	return ret0
}

// GetTo indicates an expected call of GetTo.
func (mr *MockMessageMockRecorder) GetTo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTo", reflect.TypeOf((*MockMessage)(nil).GetTo))
}

// IsBroadcast mocks base method.
func (m *MockMessage) IsBroadcast() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBroadcast")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBroadcast indicates an expected call of IsBroadcast.
func (mr *MockMessageMockRecorder) IsBroadcast() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBroadcast", reflect.TypeOf((*MockMessage)(nil).IsBroadcast))
}

// IsToOldAndNewCommittees mocks base method.
func (m *MockMessage) IsToOldAndNewCommittees() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsToOldAndNewCommittees")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsToOldAndNewCommittees indicates an expected call of IsToOldAndNewCommittees.
func (mr *MockMessageMockRecorder) IsToOldAndNewCommittees() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsToOldAndNewCommittees", reflect.TypeOf((*MockMessage)(nil).IsToOldAndNewCommittees))
}

// IsToOldCommittee mocks base method.
func (m *MockMessage) IsToOldCommittee() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsToOldCommittee")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsToOldCommittee indicates an expected call of IsToOldCommittee.
func (mr *MockMessageMockRecorder) IsToOldCommittee() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsToOldCommittee", reflect.TypeOf((*MockMessage)(nil).IsToOldCommittee))
}

// String mocks base method.
func (m *MockMessage) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockMessageMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockMessage)(nil).String))
}

// Type mocks base method.
func (m *MockMessage) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockMessageMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockMessage)(nil).Type))
}

// WireBytes mocks base method.
func (m *MockMessage) WireBytes() ([]byte, *tss.MessageRouting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WireBytes")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*tss.MessageRouting)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WireBytes indicates an expected call of WireBytes.
func (mr *MockMessageMockRecorder) WireBytes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WireBytes", reflect.TypeOf((*MockMessage)(nil).WireBytes))
}

// WireMsg mocks base method.
func (m *MockMessage) WireMsg() *tss.MessageWrapper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WireMsg")
	ret0, _ := ret[0].(*tss.MessageWrapper)
	return ret0
}

// WireMsg indicates an expected call of WireMsg.
func (mr *MockMessageMockRecorder) WireMsg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WireMsg", reflect.TypeOf((*MockMessage)(nil).WireMsg))
}

// MockParty is a mock of Party interface.
type MockParty struct {
	ctrl     *gomock.Controller
	recorder *MockPartyMockRecorder
}

// MockPartyMockRecorder is the mock recorder for MockParty.
type MockPartyMockRecorder struct {
	mock *MockParty
}

// NewMockParty creates a new mock instance.
func NewMockParty(ctrl *gomock.Controller) *MockParty {
	mock := &MockParty{ctrl: ctrl}
	mock.recorder = &MockPartyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParty) EXPECT() *MockPartyMockRecorder {
	return m.recorder
}

// FirstRound mocks base method.
func (m *MockParty) FirstRound() tss.Round {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstRound")
	ret0, _ := ret[0].(tss.Round)
	return ret0
}

// FirstRound indicates an expected call of FirstRound.
func (mr *MockPartyMockRecorder) FirstRound() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstRound", reflect.TypeOf((*MockParty)(nil).FirstRound))
}

// PartyID mocks base method.
func (m *MockParty) PartyID() *tss.PartyID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartyID")
	ret0, _ := ret[0].(*tss.PartyID)
	return ret0
}

// PartyID indicates an expected call of PartyID.
func (mr *MockPartyMockRecorder) PartyID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartyID", reflect.TypeOf((*MockParty)(nil).PartyID))
}

// Running mocks base method.
func (m *MockParty) Running() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Running")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Running indicates an expected call of Running.
func (mr *MockPartyMockRecorder) Running() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Running", reflect.TypeOf((*MockParty)(nil).Running))
}

// Start mocks base method.
func (m *MockParty) Start() *tss.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(*tss.Error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockPartyMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockParty)(nil).Start))
}

// StoreMessage mocks base method.
func (m *MockParty) StoreMessage(arg0 tss.ParsedMessage) (bool, *tss.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMessage", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*tss.Error)
	return ret0, ret1
}

// StoreMessage indicates an expected call of StoreMessage.
func (mr *MockPartyMockRecorder) StoreMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMessage", reflect.TypeOf((*MockParty)(nil).StoreMessage), arg0)
}

// String mocks base method.
func (m *MockParty) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockPartyMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockParty)(nil).String))
}

// Update mocks base method.
func (m *MockParty) Update(arg0 tss.ParsedMessage) (bool, *tss.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*tss.Error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPartyMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockParty)(nil).Update), arg0)
}

// UpdateFromBytes mocks base method.
func (m *MockParty) UpdateFromBytes(arg0 []byte, arg1 *tss.PartyID, arg2 bool) (bool, *tss.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFromBytes", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*tss.Error)
	return ret0, ret1
}

// UpdateFromBytes indicates an expected call of UpdateFromBytes.
func (mr *MockPartyMockRecorder) UpdateFromBytes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFromBytes", reflect.TypeOf((*MockParty)(nil).UpdateFromBytes), arg0, arg1, arg2)
}

// ValidateMessage mocks base method.
func (m *MockParty) ValidateMessage(arg0 tss.ParsedMessage) (bool, *tss.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateMessage", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*tss.Error)
	return ret0, ret1
}

// ValidateMessage indicates an expected call of ValidateMessage.
func (mr *MockPartyMockRecorder) ValidateMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateMessage", reflect.TypeOf((*MockParty)(nil).ValidateMessage), arg0)
}

// WaitingFor mocks base method.
func (m *MockParty) WaitingFor() []*tss.PartyID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitingFor")
	ret0, _ := ret[0].([]*tss.PartyID)
	return ret0
}

// WaitingFor indicates an expected call of WaitingFor.
func (mr *MockPartyMockRecorder) WaitingFor() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitingFor", reflect.TypeOf((*MockParty)(nil).WaitingFor))
}

// WrapError mocks base method.
func (m *MockParty) WrapError(arg0 error, arg1 ...*tss.PartyID) *tss.Error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WrapError", varargs...)
	ret0, _ := ret[0].(*tss.Error)
	return ret0
}

// WrapError indicates an expected call of WrapError.
func (mr *MockPartyMockRecorder) WrapError(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrapError", reflect.TypeOf((*MockParty)(nil).WrapError), varargs...)
}

// advance mocks base method.
func (m *MockParty) advance() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "advance")
}

// advance indicates an expected call of advance.
func (mr *MockPartyMockRecorder) advance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "advance", reflect.TypeOf((*MockParty)(nil).advance))
}

// lock mocks base method.
func (m *MockParty) lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "lock")
}

// lock indicates an expected call of lock.
func (mr *MockPartyMockRecorder) lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "lock", reflect.TypeOf((*MockParty)(nil).lock))
}

// round mocks base method.
func (m *MockParty) round() tss.Round {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "round")
	ret0, _ := ret[0].(tss.Round)
	return ret0
}

// round indicates an expected call of round.
func (mr *MockPartyMockRecorder) round() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "round", reflect.TypeOf((*MockParty)(nil).round))
}

// setRound mocks base method.
func (m *MockParty) setRound(arg0 tss.Round) *tss.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setRound", arg0)
	ret0, _ := ret[0].(*tss.Error)
	return ret0
}

// setRound indicates an expected call of setRound.
func (mr *MockPartyMockRecorder) setRound(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setRound", reflect.TypeOf((*MockParty)(nil).setRound), arg0)
}

// unlock mocks base method.
func (m *MockParty) unlock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "unlock")
}

// unlock indicates an expected call of unlock.
func (mr *MockPartyMockRecorder) unlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "unlock", reflect.TypeOf((*MockParty)(nil).unlock))
}
