// Code generated by MockGen. DO NOT EDIT.
// Source: ./tss/common/base.go

// Package mock_tss is a generated GoMock package.
package mock_tss

import (
	reflect "reflect"

	common "github.com/ChainSafe/chainbridge-core/tss/common"
	gomock "github.com/golang/mock/gomock"
	peer "github.com/libp2p/go-libp2p-core/peer"
)

// MockCommunication is a mock of Communication interface.
type MockCommunication struct {
	ctrl     *gomock.Controller
	recorder *MockCommunicationMockRecorder
}

// MockCommunicationMockRecorder is the mock recorder for MockCommunication.
type MockCommunicationMockRecorder struct {
	mock *MockCommunication
}

// NewMockCommunication creates a new mock instance.
func NewMockCommunication(ctrl *gomock.Controller) *MockCommunication {
	mock := &MockCommunication{ctrl: ctrl}
	mock.recorder = &MockCommunicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommunication) EXPECT() *MockCommunicationMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockCommunication) Broadcast(peers peer.IDSlice, msg []byte, msgType common.ChainBridgeMessageType, sessionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Broadcast", peers, msg, msgType, sessionID)
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockCommunicationMockRecorder) Broadcast(peers, msg, msgType, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockCommunication)(nil).Broadcast), peers, msg, msgType, sessionID)
}

// CancelSubscribe mocks base method.
func (m *MockCommunication) CancelSubscribe(topic common.ChainBridgeMessageType, sessionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CancelSubscribe", topic, sessionID)
}

// CancelSubscribe indicates an expected call of CancelSubscribe.
func (mr *MockCommunicationMockRecorder) CancelSubscribe(topic, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSubscribe", reflect.TypeOf((*MockCommunication)(nil).CancelSubscribe), topic, sessionID)
}

// ReleaseStream mocks base method.
func (m *MockCommunication) ReleaseStream(sessionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReleaseStream", sessionID)
}

// ReleaseStream indicates an expected call of ReleaseStream.
func (mr *MockCommunicationMockRecorder) ReleaseStream(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseStream", reflect.TypeOf((*MockCommunication)(nil).ReleaseStream), sessionID)
}

// Subscribe mocks base method.
func (m *MockCommunication) Subscribe(topic common.ChainBridgeMessageType, sessionID string, channel chan *common.WrappedMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", topic, sessionID, channel)
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockCommunicationMockRecorder) Subscribe(topic, sessionID, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockCommunication)(nil).Subscribe), topic, sessionID, channel)
}
