// Code generated by MockGen. DO NOT EDIT.
// Source: ./tss/common/base.go

// Package mock_tss is a generated GoMock package.
package mock_tss

import (
	reflect "reflect"

	communication "github.com/ChainSafe/chainbridge-core/communication"
	tss "github.com/binance-chain/tss-lib/tss"
	gomock "github.com/golang/mock/gomock"
	peer "github.com/libp2p/go-libp2p-core/peer"
)

// MockCommunication is a mock of Communication interface.
type MockCommunication struct {
	ctrl     *gomock.Controller
	recorder *MockCommunicationMockRecorder
}

// MockCommunicationMockRecorder is the mock recorder for MockCommunication.
type MockCommunicationMockRecorder struct {
	mock *MockCommunication
}

// NewMockCommunication creates a new mock instance.
func NewMockCommunication(ctrl *gomock.Controller) *MockCommunication {
	mock := &MockCommunication{ctrl: ctrl}
	mock.recorder = &MockCommunicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommunication) EXPECT() *MockCommunicationMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockCommunication) Broadcast(peers peer.IDSlice, msg []byte, msgType communication.ChainBridgeMessageType, sessionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Broadcast", peers, msg, msgType, sessionID)
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockCommunicationMockRecorder) Broadcast(peers, msg, msgType, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockCommunication)(nil).Broadcast), peers, msg, msgType, sessionID)
}

// EndSession mocks base method.
func (m *MockCommunication) EndSession(sessionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndSession", sessionID)
}

// EndSession indicates an expected call of EndSession.
func (mr *MockCommunicationMockRecorder) EndSession(sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndSession", reflect.TypeOf((*MockCommunication)(nil).EndSession), sessionID)
}

// Subscribe mocks base method.
func (m *MockCommunication) Subscribe(topic communication.ChainBridgeMessageType, sessionID string, channel chan *communication.WrappedMessage) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", topic, sessionID, channel)
	ret0, _ := ret[0].(string)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockCommunicationMockRecorder) Subscribe(topic, sessionID, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockCommunication)(nil).Subscribe), topic, sessionID, channel)
}

// UnSubscribe mocks base method.
func (m *MockCommunication) UnSubscribe(topic communication.ChainBridgeMessageType, sessionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnSubscribe", topic, sessionID)
}

// UnSubscribe indicates an expected call of UnSubscribe.
func (mr *MockCommunicationMockRecorder) UnSubscribe(topic, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribe", reflect.TypeOf((*MockCommunication)(nil).UnSubscribe), topic, sessionID)
}

// MockParty is a mock of Party interface.
type MockParty struct {
	ctrl     *gomock.Controller
	recorder *MockPartyMockRecorder
}

// MockPartyMockRecorder is the mock recorder for MockParty.
type MockPartyMockRecorder struct {
	mock *MockParty
}

// NewMockParty creates a new mock instance.
func NewMockParty(ctrl *gomock.Controller) *MockParty {
	mock := &MockParty{ctrl: ctrl}
	mock.recorder = &MockPartyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParty) EXPECT() *MockPartyMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockParty) Start() *tss.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(*tss.Error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockPartyMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockParty)(nil).Start))
}

// UpdateFromBytes mocks base method.
func (m *MockParty) UpdateFromBytes(wireBytes []byte, from *tss.PartyID, isBroadcast bool) (bool, *tss.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFromBytes", wireBytes, from, isBroadcast)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*tss.Error)
	return ret0, ret1
}

// UpdateFromBytes indicates an expected call of UpdateFromBytes.
func (mr *MockPartyMockRecorder) UpdateFromBytes(wireBytes, from, isBroadcast interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFromBytes", reflect.TypeOf((*MockParty)(nil).UpdateFromBytes), wireBytes, from, isBroadcast)
}
