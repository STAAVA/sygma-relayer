package common

import "github.com/libp2p/go-libp2p-core/peer"

type ChainBridgeMessageType uint8

const (
	// KeyGenMsg is the message directly generated by tss-lib package
	KeyGenMsg ChainBridgeMessageType = iota
	// KeySignMsg is the message directly generated by tss lib for sign
	KeySignMsg
	// ReshareMsg
	ReshareMsg
	// BullyMsgElection [bully messages] is
	BullyMsgElection
	// BullyMsgAlive [bully messages] is
	BullyMsgAlive
	// BullyMsgEnd [bully messages] is
	BullyMsgEnd
	// BullyMsgCoordinator [bully messages] is
	BullyMsgCoordinator
	//
	BullyMsgPing
	//
	BullyMsgPingResponse
	// EchoMsg is
	EchoMsg
	// InitiateMsg
	InitiateMsg
	// ReadMsg
	ReadyMsg
	// StartSignMsg
	StartSignMsg
	// StartMsg
	StartMsg
	// Unknown is the message indicates the undefined message type
	Unknown
)

func (msgType ChainBridgeMessageType) ShouldLogg() bool {
	return msgType != BullyMsgPingResponse && msgType != BullyMsgPing
}

// String implement fmt.Stringer
func (msgType ChainBridgeMessageType) String() string {
	switch msgType {
	case KeyGenMsg:
		return "KeyGenMsg"
	case KeySignMsg:
		return "KeySignMsg"
	case BullyMsgElection:
		return "BullyMsgElection"
	case BullyMsgAlive:
		return "BullyMsgAlive"
	case BullyMsgEnd:
		return "BullyMsgEnd"
	case BullyMsgCoordinator:
		return "BullyMsgCoordinator"
	case EchoMsg:
		return "EchoMsg"
	case BullyMsgPing:
		return "BullyMsgPing"
	case BullyMsgPingResponse:
		return "BullyMsgPingResponse"
	case InitiateMsg:
		return "InitiateMsg"
	case StartSignMsg:
		return "StartSignMsg"
	case StartMsg:
		return "StartMsg"
	case ReadyMsg:
		return "ReadyMsg"
	case ReshareMsg:
		return "ReshareMsg"
	default:
		return "Unknown"
	}
}

// WrappedMessage is a message with type in it
type WrappedMessage struct {
	MessageType ChainBridgeMessageType `json:"message_type"`
	SessionID   string                 `json:"message_id"`
	Payload     []byte                 `json:"payload"`
	From        peer.ID                `json:"from"`
}
