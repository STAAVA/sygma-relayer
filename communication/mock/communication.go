// Code generated by MockGen. DO NOT EDIT.
// Source: ./communication/communication.go

// Package mock_communication is a generated GoMock package.
package mock_communication

import (
	reflect "reflect"

	communication "github.com/ChainSafe/chainbridge-core/communication"
	gomock "github.com/golang/mock/gomock"
	peer "github.com/libp2p/go-libp2p-core/peer"
)

// MockCommunication is a mock of Communication interface.
type MockCommunication struct {
	ctrl     *gomock.Controller
	recorder *MockCommunicationMockRecorder
}

// MockCommunicationMockRecorder is the mock recorder for MockCommunication.
type MockCommunicationMockRecorder struct {
	mock *MockCommunication
}

// NewMockCommunication creates a new mock instance.
func NewMockCommunication(ctrl *gomock.Controller) *MockCommunication {
	mock := &MockCommunication{ctrl: ctrl}
	mock.recorder = &MockCommunicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommunication) EXPECT() *MockCommunicationMockRecorder {
	return m.recorder
}

// Broadcast mocks base method.
func (m *MockCommunication) Broadcast(peers peer.IDSlice, msg []byte, msgType communication.ChainBridgeMessageType, sessionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Broadcast", peers, msg, msgType, sessionID)
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockCommunicationMockRecorder) Broadcast(peers, msg, msgType, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockCommunication)(nil).Broadcast), peers, msg, msgType, sessionID)
}

// Subscribe mocks base method.
func (m *MockCommunication) Subscribe(msgType communication.ChainBridgeMessageType, sessionID string, channel chan *communication.WrappedMessage) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", msgType, sessionID, channel)
	ret0, _ := ret[0].(string)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockCommunicationMockRecorder) Subscribe(msgType, sessionID, channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockCommunication)(nil).Subscribe), msgType, sessionID, channel)
}

// UnSubscribe mocks base method.
func (m *MockCommunication) UnSubscribe(subscriptionID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnSubscribe", subscriptionID)
}

// UnSubscribe indicates an expected call of UnSubscribe.
func (mr *MockCommunicationMockRecorder) UnSubscribe(subscriptionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSubscribe", reflect.TypeOf((*MockCommunication)(nil).UnSubscribe), subscriptionID)
}
